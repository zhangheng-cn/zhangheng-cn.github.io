{"pages":[{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"个人简介12343455 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}],"posts":[{"title":"C++服务器框架","text":"zhc开发环境Ubuntu 18.04gcc 7.5.0cmake 项目目录bin – 二进制输出文件 build – 中间文件目录 cmake – cmake函数文件夹 CMakeLists.txt – cmake配置文件 lib – 库的输出路径 zhc – 源代码路径 test – 测试路径 Makefile 日志系列 仿照Log4J 12345Logger (定义日志类别) | |--------Formatter (日志格式) |Appender (日志输出目的地) 配置系统Config –&gt; yaml yaml的安装 配置 使用 1234567yaml-cpp: githubmkdir build &amp;&amp; cd buildcmake.. &amp;&amp; make install安装完yaml库的路径/usr/local/inlcude/usr/local/lib 12// node格式 Null Scalar Map Sequence YAML::Node node = YAML::LoadFile(filename); 配置系统的原则， 约定优于配置 123456789101112tempalte&lt;T, FromStr, ToStr&gt;class ConfigVar;//默认直接用boost库的lexical_cast进行转化template&lt;F, T&gt;class LexicalCast;//vector偏特化 还有list set unordered_set map unordered_map//map unordered_map 目前只支持key = std::stringtempalte&lt;T&gt;class LexicalCast&lt;string, vector&lt;T&gt; &gt;;class LexicalCast&lt;vector&lt;T&gt;, string&gt;; 自定义数据类型，要将zhc::LexicalCast偏特化，可以和stl的容器配合使用 1234567class Person{};template&lt;&gt;class LexicalCast&lt;std::string, Person&gt;;class LexicalCast&lt;Person, std::string&gt;;//然后Config就可以解析自定义类型ConfigVar&lt;map&lt;string, Person&gt; &gt;::ptr g_map_person = ...; yaml的格式 -代表数组，用缩进表示层级关系123456789101112131415161718class: person: name: xx age: xx map: person1: name: xx age: xx person2: name: xx age: xx vec_map_person: vector1: - name: xx age: xx - name: xx age: xx vector2: 配置的事件机制 当一个配置项发生修改的时候，可以反向通知对应的代码，回调 日志系统整合配置系统12345678logs: - name: root level: (debug, info, warn, error, fatal) formatter: '%d%T%p%T%t%m%n' appender: - type: (StdOutLogAppender, FileLogAppender) level: (debug, info, warn, error, fatal) file: /logs/xxx.log 12zhc::Logger g_logger = zhc::LoggerMgr::GetInstance()-&gt;getLogger(name);ZHC_LOG_INFO(g_logger) &lt;&lt; &quot;xxxx log&quot;; 1234567static Logger::ptr g_log = ZHC_LOG_NAME(&quot;system&quot;)//m_root, m_system-&gt; root//当logger的appenders为空，使用root写logger//定义LogDefine LogAppenderDefine，实现日志配置解析 线程123456789//pthread_xxx //std::thread. pthread pthread_create互斥量: metux信号量: semaphoreMetux锁的性能比较差 考虑使用Spinlock 速度提升3倍 换用CASLock和Spinlock差不多Log文件删除没感知，每1秒reopen()一次Config --&gt; RWMetux 协程12345678910用户态的线程，更轻量级，掌握在用户手中定义协程接口&lt;ucontext_t.h&gt;- getcontext- setcontext- makecontext- swapcontextmacro(宏)bcaktrace(看栈内信息和层数)在宏内定义assert 123456789101112131415util.h#define ZHC_ASSERT(x) \\ if(!(x)) { \\ ZHC_LOG_INFO(ZHC_LOG_ROOT()) &lt;&lt; x \\ &lt;&lt; &quot;\\nbacktrace\\n&quot; &lt;&lt; zhc::BacktraceToString(100, 2, &quot; &quot;); \\ } #define ZHC_ASSERT2(x, w) \\ if(!(x)) { \\ ZHC_LOG_INFO(ZHC_LOG_ROOT()) &lt;&lt; x \\ &lt;&lt; &quot;\\n&quot; &lt;&lt; w \\ &lt;&lt; &quot;\\nbacktrace\\n&quot; &lt;&lt; zhc::BacktraceToString(100, 2, &quot; &quot;); \\ } 12345678910111213141516171819202122232425262728由主协程调度，不能任意切换 Thread -&gt; main_fiber &lt; -- &gt; sub_fiber ^ | v sub_fiber class Fiber{private: //默认构造函数相当于主协程 没有分配栈空间 Fiber()；public: //相当于真正的子协程, 每个协程有独立的栈，在栈上执行函数 Fiber(std::function&lt;void()&gt; cb, size_t stacksize = 0); //释放栈空间 ~Fiber(); //重置协程函数，有协程执行完成(TERM)，内存没释放 继续利用 --&gt;状态又变成INIT void reset(std::function&lt;void()&gt; cb); //切换到当前协程执行 void swapIn(); void swapOut(); void setThis(); Fiber::ptr GetThis(); void YieldToReady(); void YieldToHold(); uint64_t TotalFibers(); void MainFunc();}; 协程调度模块 scheduler123456789 1-N 1-Mscheduler --&gt; thread --&gt; fiber1.线程池， 分配一组线程2.协程调度模块， 将协程指定到相应的线程上去执行N -- Mm_threads&lt;function&lt;void()&gt;, fiber &gt; m_fibersschedule(func/fiber) 架构Log","link":"/2021/03/07/C++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/03/07/hello-world/"},{"title":"ubuntu18.04","text":"ubuntu18的固定ip配置从/etc/network/interfaces转移到了/etc/netplan/*-netcfg.yaml文件中，修改后不用重启机器，通过netplan apply完成设置 12# 打开文件sudo vim /etc/netplan/01-network-manager-all.yaml 12345678910111213# 修改配置network: version: 2 renderer: NetworkManager ethernets: ens33: dhcp4: no dhcp6: no addresses: [192.168.84.84/24] gateway4: 192.168.84.2 nameservers: addresses: [114.114.114.114, 8.8.8.8]","link":"/2021/02/07/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BA%E5%AE%9Aip/"}],"tags":[],"categories":[]}